stdout of test 'inline08` in directory 'monetdb5/optimizer` itself:


# 20:02:17 >  
# 20:02:17 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=30645 --set xrpc_port=40491 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline08.mal
# 20:02:17 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_optimizer', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:33568/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-10161/.s.monetdb.33568
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded


# 10:07:20 >  
# 10:07:20 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "--host=/var/tmp/mtest-8365" "--port=32444"
# 10:07:20 >  

function user.qry():void;               	#[0] (0)  0 
    b:bat[:str] := bat.new(:str);       	#[1] (0) CMDBATnew 1 <- 2 
    bat.append(b:bat[:str], "1":str);   	#[2] (0) BKCappend_val_wrap 3 <- 1 4 
    b:bat[:str] := batstr.replace(b:bat[:str], "A":str, "":str);	#[1] (0) STRbatReplacecst 1 <- 1 17 18 
    b:bat[:str] := batstr.replace(b:bat[:str], "E":str, "":str);	#[2] (0) STRbatReplacecst 1 <- 1 19 18 
    b:bat[:str] := batstr.replace(b:bat[:str], "I":str, "":str);	#[3] (0) STRbatReplacecst 1 <- 1 20 18 
    b:bat[:str] := batstr.replace(b:bat[:str], "O":str, "":str);	#[4] (0) STRbatReplacecst 1 <- 1 21 18 
    b:bat[:str] := batstr.replace(b:bat[:str], "U":str, "":str);	#[5] (0) STRbatReplacecst 1 <- 1 22 18 
    b:bat[:str] := batstr.replace(b:bat[:str], " ":str, "":str);	#[6] (0) STRbatReplacecst 1 <- 1 23 18 
    X_9:bat[:str] := b:bat[:str];	#[7] (0)  12 <- 1 
    b:bat[:str] := batstr.replace(b:bat[:str], "A":str, "":str);	#[1] (0) STRbatReplacecst 1 <- 1 17 18 
    b:bat[:str] := batstr.replace(b:bat[:str], "E":str, "":str);	#[2] (0) STRbatReplacecst 1 <- 1 19 18 
    b:bat[:str] := batstr.replace(b:bat[:str], "I":str, "":str);	#[3] (0) STRbatReplacecst 1 <- 1 20 18 
    b:bat[:str] := batstr.replace(b:bat[:str], "O":str, "":str);	#[4] (0) STRbatReplacecst 1 <- 1 21 18 
    b:bat[:str] := batstr.replace(b:bat[:str], "U":str, "":str);	#[5] (0) STRbatReplacecst 1 <- 1 22 18 
    b:bat[:str] := batstr.replace(b:bat[:str], " ":str, "":str);	#[6] (0) STRbatReplacecst 1 <- 1 23 18 
    X_10:bat[:str] := b:bat[:str];	#[7] (0)  13 <- 1 
    X_11:bat[:str] := batcalc.+(X_9:bat[:str], X_10:bat[:str], nil:BAT, nil:BAT);	#[3] (0) CMDbatADD 14 <- 12 13 28 29 
    z:bat[:str] := X_11:bat[:str];	#[4] (0)  5 <- 14 
end user.qry;	#[19] (0)  
#inline               actions= 0 time=3 usec 
#remap                actions= 1 time=117 usec 

# 20:02:17 >  
# 20:02:17 >  Done.
# 20:02:17 >  

